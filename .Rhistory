df2[11,'region']
df2[11,]$region
df3 <- df2[-11,]
df3
fit1 <- lm(alcohol~tobacco, data=df3)
fit1
fit
df3 <- df2[-11,]
fit1 <- lm(alcohol~tobacco, data=df3)
fit1
fit
predict(fit)
predict(fit1)
df3 <- df2[-11,]
fit1 <- lm(alcohol~tobacco, data=df3)
fit
fit1
predict(fit)
predict(fit1)
p <- ggplot(df2, aes(x=tobacco, y=alcohol)) + geom_point(aes(color=region)) +
ggtitle("Tobacco versus Alcohol Spending") +
xlab("Spending on Alcohol") +
ylab("Spending on Tobacco")
p + geom_line(aes(y=fitted(fit)))
p + geom_line(aes(y=fitted(fit), color="firebrick"))
p + geom_line(aes(y=fitted(fit)))
p + geom_line(aes(y=fitted(fit1)))
par(mfrow=c(1,2))
p <- ggplot(df2, aes(x=tobacco, y=alcohol)) + geom_point(aes(color=region)) +
ggtitle("Tobacco versus Alcohol Spending") +
xlab("Spending on Alcohol") +
ylab("Spending on Tobacco")
p + geom_line(aes(y=fitted(fit)))
p + geom_line(aes(y=fitted(fit1)))
df1
df2
df3
ggplot(df2, aes(x=tobacco, y=alcohol)) + geom_point(aes(color=region)) +
ggtitle("Tobacco versus Alcohol Spending") +
ylab("Spending on Alcohol") +
xlab("Spending on Tobacco")
plot(df2$alcohol, df2$tobacco, xlab="Tobacco Spending", ylab="Alcohol Spending",
main="Spending on Alcohol Versus Tobacco")
par(mfrow=c(1,2))
plot(df2$alcohol, df2$tobacco, xlab="Tobacco Spending", ylab="Alcohol Spending",
main="Spending on Alcohol Versus Tobacco")
abline(fit)
fit
plot(df2$alcohol, df2$tobacco, xlab="Tobacco Spending", ylab="Alcohol Spending",
main="Alcohol Versus Tobacco")
abline(fit)
par(mfrow=c(1,2))
plot(df2$tobacco, df2$alcohol, xlab="Tobacco Spending", ylab="Alcohol Spending",
main="Alcohol Versus Tobacco")
abline(fit)
par(mfrow=c(1,2))
plot(df2$tobacco, df2$alcohol, xlab="Tobacco Spending", ylab="Alcohol Spending",
main="Alcohol Versus Tobacco")
abline(fit)
min(df2$tobacco)
plot(df2$tobacco, df2$alcohol, xlab="Tobacco Spending", ylab="Alcohol Spending", xlim=c(2.5, 4.7)
main="Alcohol Versus Tobacco")
plot(df2$tobacco, df2$alcohol, xlab="Tobacco Spending", ylab="Alcohol Spending", xlim=c(2.5, 4.7),
main="Alcohol Versus Tobacco")
abline(fit)
plot(df2$tobacco, df2$alcohol, xlab="Tobacco Spending", ylab="Alcohol Spending", xlim=c(2.5, 4.7),
main="Alcohol Versus Tobacco")
abline(fit)
par(mfrow=c(1,2))
plot(df2$tobacco, df2$alcohol, xlab="Tobacco Spending", ylab="Alcohol Spending", xlim=c(2.5, 4.7), ylim=c(4, 6.5),
main="Alcohol Versus Tobacco")
abline(fit)
plot(df3$tobacco, df3$alcohol, xlab="Tobacco Spending", ylab="Alcohol Spending", xlim=c(2.5, 4.7), ylim=c(4, 6.5),
main="Alcohol Versus Tobacco")
abline(fit1)
?qchisq
qchisq(.95, df=3)
287.67-189.45
data(mtcars)
fit1 <- glm(mpg~am*hp, family=gaussian(link="identity"), data=mtcars)
summary(fit1)
fit2 <- glm(mpg~am+hp, family=gaussian(link="identity"), data=mtcars)
fit2
fit1
View(mtcars)
?glm
pnorm(.95)
qnorm(.95)
qnorm(.975)
qnorm(.99)
-.00296-(qnorm(.99)*.0004409)
-.00296+(qnorm(.99)*.0004409)
?predict.glm
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
?lm.ridge
longley # not the same as the S-PLUS dataset
names(longley)[1] <- "y"
lm.ridge(y ~ ., longley)
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
select(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.0001)))
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
select(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.0001)))
lm.ridge(y ~ ., longley)
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
lm.ridge(y ~ ., longley)
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
names(longley)[1] <- "y"
lm.ridge(y ~ ., longley)
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
lm.ridge(y ~ ., longley)
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
select(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.0001)))
lm.ridge(y~., longley, lambda=0.0057)
longley
lm.ridge(y ~ ., longley)
longley
plot(lm.ridge(y ~ ., longley,
lambda = seq(0,0.1,0.001)))
lm.ridge(y~., longley, lambda=0)
lm.ridge(y~., longley, lambda=0.04)
longley
?longley
lm.ridge(y~., longley, lambda=0.02)
lm.ridge(y~., longley, lambda=seq(0,0.1,0.001))
?smooth.spline
require(graphics)
plot(dist ~ speed, data = cars, main = "data(cars)  &  smoothing splines")
cars.spl <- with(cars, smooth.spline(speed, dist))
cars.spl
plot(dist ~ speed, data = cars, main = "data(cars)  &  smoothing splines")
cars.spl <- with(cars, smooth.spline(speed, dist))
cars.spl
lines(cars.spl, col = "blue")
ss10 <- smooth.spline(cars[,"speed"], cars[,"dist"], df = 10)
lines(ss10, lty = 2, col = "red")
legend(5,120,c(paste("default [C.V.] => df =",round(cars.spl$df,1)),
"s( * , df = 10)"), col = c("blue","red"), lty = 1:2,
bg = 'bisque')
## Residual (Tukey Anscombe) plot:
plot(residuals(cars.spl) ~ fitted(cars.spl))
abline(h = 0, col = "gray")
cars.spl
aatemp
data(aatemp)
library(faraway)
install.packages("faraway")
library(faraway)
data(aatemp)
aatemp
View(aatemp)
plot(temp~year, data=aatemp)
fit <- lm(temp~year, data=aatemp)
fit <- lm(temp~year, data=aatemp)
plot(temp~year, data=aatemp)
abline(fit)
fit <- lm(temp~year, data=aatemp)
summary(fit)
plot(temp~year, data=aatemp)
abline(fit)
temp.spl <- with(aatemp, smooth.spline(year, temp))
temp.spl
plot(temp~year, data=aatemp)
temp.spl <- with(aatemp, smooth.spline(year, temp))
plot(temp~year, data=aatemp)
lines(temp.spl, col="forestgreen")
x <- seq(0,1,len=256)
x
?rnorm
y <- rep(0,256)
f <- rep(0,256)
f[0]
f[1]
len(x)
length(x)
set.seed(10)
x <- seq(0,1,len=256)
e <- rnorm(256,mean=0,sd=0.1)
f <- rep(0,256)
for(i in 1:256) {
if(x[i]<=0.5) {f[i]=x[i]}
else {f[i]=x[i]-1}
}
y <- f+e
y
y[256]
x[256]
e[256]
e
y
x[255]
f[255]
e[255]
f[255]+e[255]
y
plot(x,y)
set.seed(10)
x <- seq(0,1,len=256)
e <- rnorm(256,mean=0,sd=0.1)
f <- rep(0,256)
for(i in 1:256) {
if(x[i]<=0.5) {f[i]=x[i]}
else {f[i]=x[i]-1}
}
y <- f+e
fnctn <- function(x) {
if(x<=0.5) {x}
else {x-1}
}
plot(x,y)
curve(fnctn, 0,1,n=256)
?curve
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
fnctn(x)
set.seed(10)
x <- seq(0,1,len=256)
e <- rnorm(256,mean=0,sd=0.1)
f <- rep(0,256)
for(i in 1:256) {
if(x[i]<=0.5) {f[i]=x[i]}
else {f[i]=x[i]-1}
}
y <- f+e
fnctn <- function(x) {
if(x[i]<=0.5) {x[i]}
else {x[i]-1}
}
plot(x,y)
curve(fnctn, 0,1,n=256)
fnctn(x)
x
fnctn(x)
set.seed(10)
x <- seq(0,1,len=256)
e <- rnorm(256,mean=0,sd=0.1)
fnctn <- function(x) {
f <- rep(0,256)
for(i in 1:length(x)) {
if(x[i]<=0.5) {f[i]=x[i]}
else {f[i]=x[i]-1}
}
return(f)
}
f <- fnctn(x)
y <- f + e
plot(x,y)
curve(fnctn, 0,1,n=256)
lines(fnctn, 0,1,n=256)
plot(x,y)
lines(fnctn, 0,1,n=256)
plot(x,y)
plot(fnctn, 0,1,n=256)
?curve
set.seed(10)
x <- seq(0,1,len=256)
e <- rnorm(256,mean=0,sd=0.1)
fnctn <- function(x) {
f <- rep(0,256)
for(i in 1:length(x)) {
if(x[i]<=0.5) {f[i]=x[i]}
else {f[i]=x[i]-1}
}
return(f)
}
f <- fnctn(x)
y <- f + e
plot(x,y)
lines(x,f,col="orange")
plot(x,y)
lines(x,f,col="red", lwd=2)
x
.5^2*.28^2
(.5^2)*(.28^2)
.5^2*.28^2+.5^2*.24^2-2*.5^2*.28*.24
.5^2*.28^2
.5^2*.24^2
2*.5^2*.28*.24
.0196+.0144
.034-.0336
4*10^-4
4*10^-2
.1+.2-.03
.27/3
x <- c(.1,.2,-0.03)
mean(x)
x-mean(x)
(x-mean(x))^2
sum((x-mean(x))^2)
sum((x-mean(x))^2)/2
sqrt(sum((x-mean(x))^2)/2)
sqrt(sum((x-mean(x))^2)/3)
35/.22
v <- 1.22^-1
159.0909*(1-v^15)+930*v^15
198.1395*v^0.5
.5 + 6*3.4
90/.209
?mean
x <- c(1, 0, 10, -10, -1)
exp(mean(log(x)))
1+x
1+x/100
1.01*1*1.1*0.9*0.99
0.989901^(1/5)
1-0.998
log(2)/log(1.05)
7.5/2.4
1.95/2
1.954/2
qnorm(.975)
qnorm(.977)
11-(2*14/40)
11-(2*14/49)
11-(2*14/50)
11-(2*14/48)
.11-(2*.14/48)
.11-(2*.14/sqrt(48))
.11-(2*.14/sqrt(49))
1.03^(1/52)
1000/(.000569)
1000/(1.03^4)
?pnorm
pnorm(.95)
pnorm(.975)
qnorm(.975)
day_smry
library(tidyverse)
library(magrittr) # for %><%
# comparing rates for different causes of loss
cause_smry <- build %>% group_by(cause) %>% summarise(rate=mean(subrogation), count=n())
library(tidyverse)
library(magrittr) # for %><%
build <- read_csv("Build.csv")
build <- read_csv("Build.csv")
getwd()
?cd
?setwd
setwd("C:/Users/Andy/Desktop/Farmers")
build <- read_csv("Build.csv")
library(tidyverse)
library(magrittr) # for %><%
build <- read_csv("Build.csv")
# build <- read_csv("Build.csv")
load("build.Rda")
View(build)
# build <- read_csv("Build.csv")
# save(build, "build.Rda")
load("build.Rda")
# converting factor variables from string to factor
f <- c('Fake Claim Number', 'Policy Type', 'Policy Description', 'Insurance Group Indicator', 'CRN Proximate Cause',
'Loss Location State', 'Cause of Loss', 'Claim Status', 'Water Damage Source', 'Property Content', 'Product Type Code',
'Product Type', 'Construction Material Code', 'Construction Year', 'Roof Type Code', 'Roof Type')
build %<>% mutate_at(f, funs(factor(.)))
# renaming some variables
colnames(build)[1] <- 'subrogation'
colnames(build)[2] <- 'claim_num'
colnames(build)[6] <- 'crn'
colnames(build)[colnames(build)=='Cause of Loss'] <- 'cause'
colnames(build)[colnames(build)=='Loss Location State'] <- 'state'
# adding variables for report lag
build$report_lag <- as.numeric(as.Date(build$`Claim Reported Date`) - as.Date(build$`Date of Loss`))
build$claim_created_lag <- as.numeric(as.Date(build$`Claim Created Date`) - as.Date(build$`Claim Reported Date`))
build$delay <- as.numeric(as.Date(build$`Claim Created Date`) - as.Date(build$`Date of Loss`))
build[build$delay<0,]$delay <- 0 # some delays were less than 0, which is not possible unless time travel
build %<>% filter(delay<10000) # large delays caused by error in input of date of loss
# adding variable for day of the week of loss
build$day <- weekdays(as.Date(build$`Date of Loss`))
# comparing rates for different causes of loss
cause_smry <- build %>% group_by(cause) %>% summarise(rate=mean(subrogation), count=n())
cause_smry_red <- cause_smry[cause_smry$count>1000,] # exclude causes w/ low amt of observations
cause_smry_red[which(cause_smry_red$rate==max(cause_smry_red$rate)),] # losses with cause 'vehicle' have higher rate
# similar analysis, except using 'crn'
crn_smry <- build %>% group_by(crn) %>% summarise(rate=mean(subrogation), count=n())
crn_smry[which(crn_smry$rate==max(crn_smry$rate)),] # again, losses with crn cause 'vehicle' have higher rate
# analysis on 'state'
state_smry <- build %>% group_by(state) %>% summarise(rate=mean(subrogation), count=n())
# analysis on delay of reports
lag_smry <- build %>% select(claim_num,  'Date of Loss', day, 'Claim Reported Date', 'Claim Created Date',
report_lag, claim_created_lag, delay, subrogation)
lag_smry0 <- lag_smry %>% filter(subrogation==0)
lag_smry1 <- lag_smry %>% filter(subrogation==1)
summary(lag_smry0$delay)
summary(lag_smry1$delay)
# analysis on day of the week of the loss
day_smry <- build %>% group_by(day) %>% summarise(rate=mean(subrogation), count=n())
day_smry$lower <- day_smry$rate-qnorm(.975)*(day_smry$rate*(1-day_smry$rate))/day_smry$
# ANOVA test for comparing the means
View(day_smry)
?sqrt
day_smry$lower <- day_smry$rate-qnorm(.975)*sqrt((day_smry$rate*(1-day_smry$rate))/day_smry$count)
day_smry$upper <- day_smry$rate+qnorm(.975)*sqrt((day_smry$rate*(1-day_smry$rate))/day_smry$count)
View(day_smry)
summary(lag_smry0$delay)
summary(lag_smry1$delay)
View(build)
library(tidyverse)
library(magrittr) # for %><%
# build <- read_csv("Build.csv")
# save(build, "build.Rda")
load("build.Rda")
# converting factor variables from string to factor
f <- c('Fake Claim Number', 'Policy Type', 'Policy Description', 'Insurance Group Indicator', 'CRN Proximate Cause',
'Loss Location State', 'Cause of Loss', 'Claim Status', 'Water Damage Source', 'Property Content', 'Product Type Code',
'Product Type', 'Construction Material Code', 'Construction Year', 'Roof Type Code', 'Roof Type')
build %<>% mutate_at(f, funs(factor(.)))
# renaming some variables
colnames(build)[1] <- 'subrogation'
colnames(build)[2] <- 'claim_num'
colnames(build)[6] <- 'crn'
colnames(build)[colnames(build)=='Cause of Loss'] <- 'cause'
colnames(build)[colnames(build)=='Loss Location State'] <- 'state'
# adding variables for report lag
build$report_lag <- as.numeric(as.Date(build$`Claim Reported Date`) - as.Date(build$`Date of Loss`))
build$claim_created_lag <- as.numeric(as.Date(build$`Claim Created Date`) - as.Date(build$`Claim Reported Date`))
build$delay <- as.numeric(as.Date(build$`Claim Created Date`) - as.Date(build$`Date of Loss`))
build[build$delay<0,]$delay <- 0 # some delays were less than 0, which is not possible unless time travel
build %<>% filter(delay<10000) # large delays caused by error in input of date of loss
# adding variable for day of the week of loss
build$day <- weekdays(as.Date(build$`Date of Loss`))
build$`Policy Description`
?levels
levels(build$`Policy Description`)
View(state_smry)
# comparing rates for different causes of loss
cause_smry <- build %>% group_by(cause) %>% summarise(rate=mean(subrogation), count=n())
cause_smry_red <- cause_smry[cause_smry$count>1000,] # exclude causes w/ low amt of observations
cause_smry_red[which(cause_smry_red$rate==max(cause_smry_red$rate)),] # losses with cause 'vehicle' have higher rate
# similar analysis, except using 'crn'
crn_smry <- build %>% group_by(crn) %>% summarise(rate=mean(subrogation), count=n())
crn_smry[which(crn_smry$rate==max(crn_smry$rate)),] # again, losses with crn cause 'vehicle' have higher rate
# analysis on 'state'
state_smry <- build %>% group_by(state) %>% summarise(rate=mean(subrogation), count=n())
# analysis on delay of reports
lag_smry <- build %>% select(claim_num,  'Date of Loss', day, 'Claim Reported Date', 'Claim Created Date',
report_lag, claim_created_lag, delay, subrogation)
lag_smry0 <- lag_smry %>% filter(subrogation==0)
lag_smry1 <- lag_smry %>% filter(subrogation==1)
summary(lag_smry0$delay)
summary(lag_smry1$delay)
# analysis on day of the week of the loss
day_smry <- build %>% group_by(day) %>% summarise(rate=mean(subrogation), count=n())
# finding bounds for 95% confidence interval
day_smry$lower <- day_smry$rate-qnorm(.975)*sqrt((day_smry$rate*(1-day_smry$rate))/day_smry$count)
day_smry$upper <- day_smry$rate+qnorm(.975)*sqrt((day_smry$rate*(1-day_smry$rate))/day_smry$count)
View(day_smry) # weekends have a significantly higher rate of subrogation than
# comparing rates for different product types
prdct_smry <- build %>% group_by(`Product Type Code`)
View(prdct_smry)
# comparing rates for different product types
prdct_smry <- build %>% group_by(`Product Type Code`) %>% summarise(rate=mean(subrogation), count=n())
View(prdct_smry)
levels(build$`Roof Type Code`)
colnames(build)
View(build %>% select(`Roof Type`, `Roof Type Code`))
# comparing rates for different roof types where roof is damaged
roof_smry <- build %>% filter(`Roof (Under 50% damaged) Damage Indicator`==1 | `Roof (Over 50% damaged) Damage Indicator`==1) %>%
group_by(`Roof Type`) %>% summarise(rate=mean(subrogation), count=n())
View(roof_smry)
# overall subrogation rate for when there is roof damage
build %>% filter(`Roof (Under 50% damaged) Damage Indicator`==1 | `Roof (Over 50% damaged) Damage Indicator`==1) %>%
summarise(rate=mean(subrogation), count=n())
# overall subrogation rate for when there is significant (>50%) roof damage
build %>% filter(`Roof (Over 50% damaged) Damage Indicator`==1) %>% summarise(rate=mean(subrogation), count=n())
# adding variable for total cost covered
build$covered <- build$`Dwelling Coverage Amount` + build$`Separate Structure Coverage Amount` +
build$`Content Coverage Amount` + build$`Loss of Use Coverage Amount` + build$`Medical Coverage Amount` +
build$`Liability Coverage Amount`
View(build)
# comparing cover amounts
summary(build$covered)
View(cause_smry)
summary(build %>% select(covered))
summary(build %>% filter(subrogation==0) %>% select(covered))
summary(build %>% filter(subrogation==1) %>% select(covered))
libraries(caret)
library(caret)
?plot
# comparing delay with covered amount
ggplot(build, aes(x=delay, y=covered)) +
geom_point()
View(state_smry)
colnames(build)
# overall subrogation for when there is a >0 loss of use coverage amount
build %>% filter(`Loss of Use Coverage Amount`>0) %>% summarise(rate=mean(subrogation), count=n())
getwd()
setwd("C:/Users/Andy/Desktop/crypty")
ls()
knitr::opts_chunk$set(echo = TRUE)
365*2
730*.001
qnorm(.95)
qnorm(.975)
4.5-1.5^2
qnorm(.99)
qnorm(.975)
2.326*sqrt(200)+100
2.326*sqrt(20)+20
